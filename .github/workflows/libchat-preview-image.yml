name: Preview libChat images
on:
  pull_request_target:
  workflow_dispatch:

jobs:
  preview-libchat-images:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      pull-requests: write

    runs-on: ubuntu-24.04
    strategy:
      matrix:
        image: [libchat, sandbox, mcp_server]
      fail-fast: false # 即使一个镜像构建失败，也继续构建其他镜像

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.image }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image config
        id: config
        run: |
          if [[ "${{ matrix.image }}" == "libchat" ]]; then
            echo "DOCKERFILE=projects/app/Dockerfile" >> $GITHUB_OUTPUT
            echo "DESCRIPTION=libchat-pr image" >> $GITHUB_OUTPUT
            echo "DOCKER_REPO_TAGGED=ghcr.io/${{ github.repository_owner }}/libchat-pr:fatsgpt_${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.image }}" == "sandbox" ]]; then
            echo "DOCKERFILE=projects/sandbox/Dockerfile" >> $GITHUB_OUTPUT
            echo "DESCRIPTION=libchat-sandbox-pr image" >> $GITHUB_OUTPUT
            echo "DOCKER_REPO_TAGGED=ghcr.io/${{ github.repository_owner }}/libchat-pr:fatsgpt_sandbox_${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.image }}" == "mcp_server" ]]; then
            echo "DOCKERFILE=projects/mcp_server/Dockerfile" >> $GITHUB_OUTPUT
            echo "DESCRIPTION=libchat-mcp_server-pr image" >> $GITHUB_OUTPUT
            echo "DOCKER_REPO_TAGGED=ghcr.io/${{ github.repository_owner }}/libchat-pr:fatsgpt_mcp_server_${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build ${{ matrix.image }} image for PR
        run: |
          docker buildx build \
          -f ${{ steps.config.outputs.DOCKERFILE }} \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/LibChat" \
          --label "org.opencontainers.image.description=${{ steps.config.outputs.DESCRIPTION }}" \
          --push \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t ${{ steps.config.outputs.DOCKER_REPO_TAGGED }} \
          .

      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Preview ${{ matrix.image }} Image: `${{ steps.config.outputs.DOCKER_REPO_TAGGED }}`'
            })
